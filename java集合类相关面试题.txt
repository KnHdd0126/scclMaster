1、Collection和Collections的差别
  java.util.Collection 是一个集合接口，Collection接口在Java类库中有非常多详细的实现。比如List、Set
  java.util.Collections 是针对集合类的一个帮助类，它提供了一系列的静态方法实现对各种集合的搜索、排序、线程安全化等操作。
2、ArrayList与Vector的差别
  这两个类都实现了List接口（List接口继承自Collection接口）。它们都是有序集合。它们内部的元素都是能够反复的，都能够依据序号取出当中的某一元素。
  它们两个的差别在于：
  （1）、线程安全的问题：Vector是早期Java就有的，是同意多线程操作的。是线程安全的；而ArrayList是在Java2中才出现，它是线程不安全的，仅仅能使用单线程
  操作。 因为Vector支持多线程操作，所以在性能上就比不上ArrayList了。
  相同的HashTable相比于HashMap也是支持多线程的操作而导致性能不如HashMap。
  （2）、数据增长的问题
  ArrayList和Vector都有一个初始的容量大小，当存储进去它们里面的元素个数超出容量的时候。就须要添加ArrayList和Vector的存储空间，每次添加存储空间
  的时候不是仅仅添加一个存储单元。是添加多个存储单元。
  Vector默认添加原来的一倍，ArrayList默认添加原来的0.5倍。
  Vector能够由我们自己来设置增长的大小，ArrayList没有提供相关的方法。
3、LinkedList与ArrayList有什么差别
  两者都实现的是List接口。不同之处在于：
  （1）、ArrayList是基于动态数组实现的，LinkedList是基于链表的数据结构。
  （2）、get訪问List内部随意元素时。ArrayList的性能要比LinkedList性能好。LinkedList中的get方法是要依照顺序从列表的一端开始检查，直到另一端
  （3）、对于新增和删除操作LinkedList要强于ArrayList。由于ArrayList要移动数据
4、List与Map的差别
  List是存储单列数据的集合，Map是存储key和value这样双列数据的集合，List中存储的数据是有顺序的，而且可以重复。
  Map其中存储的数据是没有顺序的，它
  存储的key是不能重复的，value是能够重复的。
  List继承Collection接口，Map不是。Map没有父类
5、List、Map、Set三个接口。存取元素时各有什么特点
  首先List和Set都是单列元素的集合。它们有一个共同的父接口Collection。
  List内的元素讲究有序性。内部元素可重复。可是Set恰恰相反。它讲究的是无序性，元素不可重复。Set的add方法有一个boolean的返回值，每当add一个新元
  素的时候都会调用equals方法进行逐一比较，当新元素与全部的已存在元素的都不重复的时候add成功返回true。否则返回false。
  Map与List和Set不同，它是双列存储的（键和值一一相应）。它在存储元素调用的是put方法，每次存储时，要存储一份key和value。不能存储重复的key，这个
  重复的规则也是利用equals进行比较。取数据的时候则能够依据key获取value。另外可以获得全部key的集合和全部value的集合。还能够获得key和value组成
  的Map.Entry对象的集合。
